#!/usr/bin/python
"""check missing dependencies"""

import getopt,sys
import apt_pkg
import apt.progress.text
import os
progusage="apt-tree [options]"
shortoptions=["h","d","i","m","u","s"]
longoptions=["help",
             "depends",
             "indirect",
             "manual",
             "unneeded",
             "signal",
             "help-nroff"]
argstype=['','','','','','','']
explanation=['This help text',
             'Do not consider Recommends as dependencies',
             'Display non-trivial dependencies',
             'Display manually selected packages',
             'Display packages required but not installed followed by -',
             'Signal non-trivial dependencies with a + sign'
             ]

provided={}
installed={}
manual={}
evident={}
nonEvident={}
unneeded={}


def markEvident(name,why):
    """mark a package as a direct dependency of another package"""
    if name in provided:
        if len(provided[name])>1:
            markProviders(name,why)
        else:
            evident[provided[name].keys()[0]]=True
    else:
        evident[name]=True


def markProviders(name,why):
    """mark providers of virtual package"""
    for provider in provided[name]:
        nonEvident[provider]=True

def markNonEvident(name,why):
    """mark a package as a dependency where some choice was made"""
    if name in provided:
        if len(provided[name])>1:
            markProviders(name,why)
        else:
            nonEvident[provided[name].keys()[0]]=True
    else:
        nonEvident[name]=True


def fmt_dep(dep):
    """Format a Dependency object [of apt_pkg] as a string."""
    ret = dep.target_pkg.name
    if dep.target_ver:
        ret += " (%s %s)" % (dep.comp_type, dep.target_ver)
    return ret

def usage():
    """Usage for this program."""
    print progusage
    for k in range(len(longoptions)):
        if longoptions[k]=='help-nroff':
            continue
        if k<len(shortoptions):
            x='-'+shortoptions[k][0:1]+'|--'+longoptions[k]
            x=x+argstype[k]
        else:
            x='--'+longoptions[k]+argstype[k]
        print "  %-20s %s" % (x,explanation[k])

def usagenroff():
    """Usage for this program in NROFF format."""
    print progusage
    print ".SH OPTIONS"
    for k in range(len(longoptions)):
        if longoptions[k]=='help-nroff':
            continue
        if k<len(shortoptions):
            x='\\fB-'+shortoptions[k][0:1]+'\\fR|\\fB--'+longoptions[k]+'\\fR'
        else:
            x='\\fB--'+longoptions[k]+'\\fR'
        if len(argstype[k])>0:
            x=x+"\\fI"+argstype[k]+"\\fR"
        print ".TP"
        print x
        print explanation[k]

def main():
    """The main function"""
    apt_pkg.init_config()
    try:
        opts, args = getopt.getopt(sys.argv[1:], "".join(shortoptions),
                                   longoptions)
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    xtypes=[]
    xall=1
    xmanual=0
    xindirect=0
    xunneeded=0
    signal=0
    for o,a in opts:
        if o in ("-h","--help"):
            usage()
            sys.exit()
        elif o in ("--help-nroff"):
            usagenroff()
            sys.exit()
        elif o in ("-d","--depends"):
            xtypes=['Depends','Pre-Depends']
        elif o in ("-m","--manual"):
            xall=0
            xmanual=1
            xtypes=['Depends','Pre-Depends']
        elif o in ("-u","--unneeded"):
            xall=0
            xunneeded=1
            xtypes=['Depends','Pre-Depends']
        elif o in ("-i","--indirect"):
            xall=0
            xindirect=1
            xtypes=['Depends','Pre-Depends']
        elif o in ("-s","--signal"):
            signal=1
        else:
            assert False, "unhandled option"
    if xall==1:
        xindirect=1
        xunneeded=1
        xmanual=1
    if len(xtypes)==0:
        xtypes=['Depends','Pre-Depends','Recommends']
    apt_pkg.init_system()
    f = open('/dev/null', 'w')
    cache=apt_pkg.Cache(apt.progress.text.OpProgress(f))
    f.close()
    depcache=apt_pkg.DepCache(cache)
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        for version in pkg.version_list:
            for provideElement in version.provides_list:
                providedName=provideElement[0]
                if providedName in provided:
                    provided[providedName][pkg.name]=True
                else:
                    provided[providedName]={pkg.name:True}
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        version=pkg.current_ver
        if version != None and pkg.current_state == apt_pkg.CURSTATE_INSTALLED:
            installed[pkg.name]=True
            manual[pkg.name]=not(depcache.is_auto_installed(pkg))
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        version=pkg.current_ver
        if version != None and pkg.current_state == apt_pkg.CURSTATE_INSTALLED:
            clauses=[]
            deplist=version.depends_list_str
            for deptype in deplist:
                if deptype not in xtypes:
                    continue
                for subclause in deplist[deptype]:
                    if len(subclause)==1:
                        markEvident(subclause[0][0],pkg.name)
                    else:
                        for deppkg,depver,depnum in subclause:
                            markNonEvident(deppkg,pkg.name)
    if xmanual==1:
        for pkgname in manual:
            if manual[pkgname]:
                if pkgname in installed:
                    print pkgname
                else:
                    print pkgname + "-"
    if xunneeded==1:
        for pkgname in evident:
            if (pkgname in manual) and (manual[pkgname]):
                continue
            if pkgname not in installed:
                print pkgname + "-"
    for pkgname in nonEvident:
        if (pkgname in manual and manual[pkgname]) or (pkgname in evident):
            continue
        if pkgname in installed:
            if xindirect==1:
                print pkgname
        else:
            if xunneeded==1:
                print pkgname + "-"

if __name__ == '__main__':
    main() 
