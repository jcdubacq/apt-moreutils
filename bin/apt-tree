#!/usr/bin/python
"""check missing dependencies"""

import getopt,sys
import apt_pkg
import apt.progress.text
import os
progusage="apt-tree [options]"
shortoptions=["h"]
longoptions=["help",
             "help-nroff"]
argstype=['']
explanation=['This help text']

def fmt_dep(dep):
    """Format a Dependency object [of apt_pkg] as a string."""
    ret = dep.target_pkg.name
    if dep.target_ver:
        ret += " (%s %s)" % (dep.comp_type, dep.target_ver)
    return ret

def usage():
    """Usage for this program."""
    print progusage
    for k in range(len(longoptions)):
        if longoptions[k]=='help-nroff':
            continue
        if k<len(shortoptions):
            x='-'+shortoptions[k][0:1]+'|--'+longoptions[k]
            x=x+argstype[k]
        else:
            x='--'+longoptions[k]+argstype[k]
        print "  %-20s %s" % (x,explanation[k])

def usagenroff():
    """Usage for this program in NROFF format."""
    print progusage
    print ".SH OPTIONS"
    for k in range(len(longoptions)):
        if longoptions[k]=='help-nroff':
            continue
        if k<len(shortoptions):
            x='\\fB-'+shortoptions[k][0:1]+'\\fR|\\fB--'+longoptions[k]+'\\fR'
        else:
            x='\\fB--'+longoptions[k]+'\\fR'
        if len(argstype[k])>0:
            x=x+"\\fI"+argstype[k]+"\\fR"
        print ".TP"
        print x
        print explanation[k]

## First, register all virtual packages
# For all packages as pkg
#   For all versions as pkgv
#     For all name in pkgv.provides
#       provided[name]+=1
#       provider[name][provided[name]-1]=pkg.name
## Find all evident packages
# For all installed packages as pkg
#  installed[pkg.name]=1
#  If pkg is manual
#    manual[pkg.name]=1
# For all installed packages as pkg
#   For all installed versions as pkgv
#     For all types as type in [Depends,Pre-Depends,Recommends]
#       For all deps as dep
#         if #clauses=1:
#           if provided[clauses[0].name]==0:
#             evident[clauses[0].name]=1
#           if provided[clauses[0].name]==1:
#             evident[lastprovider[clauses[0].name]]=1
#           if provided[clauses[0].name]>2:
#             markProviders(clauses[0].name)
#         else
#           For all clause as orClause:
#             if provided[orClause.name]>1:
#               markProviders(orClause.name)
#             else
#               if installed[orClause.name]==1
#                 nonEvident[orClause.name]=1
#               else
#                 unneeded[orClause.name]=1
## Results:
# If installed[name] && (manual[name]||essential[name]) => Package needed
# If installed[name] && nonEvident[name] => Package needed
# If unneeded[name] => Package not wanted
# If !installed[name] && essential[name] => Package not wanted
# If evident[name] && manual[name] => Package might be marked auto

# We could be more thorough if we reduced the clauses first, but less resistant
# to versioning. The relations may change in the future, so nothing can be
# completely error-proof (without very strict versioning).

# One should try to reach a state by installing all needed packages
# and removing all unneeded packages at the same time. If no solution
# comes out of the solver... there is a problem (that the solver cannot
# resolve anyway).

# markProviders(name):
# for all providers[name] as pkg
#   if installed[pkg]==1:
#     nonEvident[pkg]=1
#   else
#     unneeded[pkg]=1


def main():
    """The main function"""
    apt_pkg.init_config()
    try:
        opts, args = getopt.getopt(sys.argv[1:], "".join(shortoptions),
                                   longoptions)
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    xtypes=[]
    for o,a in opts:
        if o in ("-h","--help"):
            usage()
            sys.exit()
        elif o in ("--help-nroff"):
            usagenroff()
            sys.exit()
        else:
            assert False, "unhandled option"
    if len(xtypes)==0:
        xtypes=['Depends','Pre-Depends','Recommends']
    apt_pkg.init_system()
    f = open('/dev/null', 'w')
    cache=apt_pkg.Cache(apt.progress.text.OpProgress(f))
    f.close()
    depcache=apt_pkg.DepCache(cache)
    provided={}
    installed={}
    manual={}
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        for version in pkg.version_list:
            for provideElement in version.provides_list:
                if provideElement[0] in provided:
                    provided[provideElement[0]][pkg.name]=1
                else:
                    provided[provideElement[0]]={pkg.name:1}
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        version=pkg.current_ver
        if version != None and pkg.current_state == apt_pkg.CURSTATE_INSTALLED:
            installed[pkg.name]=True
            manual[pkg.name]=depcache.is_auto_installed(pkg)
    for pkg in sorted(cache.packages, key=lambda pkg: pkg.name):
        version=pkg.current_ver
        if version != None and pkg.current_state == apt_pkg.CURSTATE_INSTALLED:
            clauses=[]
            for dep in pkg.rev_depends_list:
                if dep.dep_type in xtypes:
                    clauses.append(dep)
            print "%s : %d" % (pkg.name,len(clauses))
if __name__ == '__main__':
    main() 
